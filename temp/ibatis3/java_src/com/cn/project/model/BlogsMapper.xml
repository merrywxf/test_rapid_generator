<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Blogs">

	<resultMap id="RM.Blogs" type="com.cn.project.model.Blogs">
        <result property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="userImage" column="user_image"/>
        <result property="name" column="name"/>
        <result property="summary" column="summary"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Blogs.columns">
	    <![CDATA[
		id,user_id,user_name,user_image,name,summary,content,created_at
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Blogs.insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO blogs (
        	id ,
        	user_id ,
        	user_name ,
        	user_image ,
        	name ,
        	summary ,
        	content ,
        	created_at 
        ) VALUES (
        	#{id} ,
        	#{userId} ,
        	#{userName} ,
        	#{userImage} ,
        	#{name} ,
        	#{summary} ,
        	#{content} ,
        	#{createdAt} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="Blogs.update" >
    <![CDATA[
        UPDATE blogs SET
	        user_id = #{userId} ,
	        user_name = #{userName} ,
	        user_image = #{userImage} ,
	        name = #{name} ,
	        summary = #{summary} ,
	        content = #{content} ,
	        created_at = #{createdAt} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="Blogs.delete">
    <![CDATA[
        DELETE FROM blogs WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="Blogs.getById" resultMap="RM.Blogs">
		SELECT <include refid="Blogs.columns" />
	    <![CDATA[
		    FROM blogs 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="Blogs.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				AND user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(userName)">
				AND user_name = #{userName}
			</if>
	       <if test="@Ognl@isNotEmpty(userImage)">
				AND user_image = #{userImage}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND name = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(summary)">
				AND summary = #{summary}
			</if>
	       <if test="@Ognl@isNotEmpty(content)">
				AND content = #{content}
			</if>
	       <if test="@Ognl@isNotEmpty(createdAt)">
				AND created_at = #{createdAt}
			</if>
		</where>
	</sql>
		
    <select id="Blogs.findPage.count" resultType="long">
        SELECT count(*) FROM blogs 
		<include refid="Blogs.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Blogs.findPage" resultMap="RM.Blogs">
    	SELECT <include refid="Blogs.columns" />
	    FROM blogs 
		<include refid="Blogs.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

