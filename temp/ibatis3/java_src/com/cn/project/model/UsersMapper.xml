<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Users">

	<resultMap id="RM.Users" type="com.cn.project.model.Users">
        <result property="id" column="id"/>
        <result property="email" column="email"/>
        <result property="passwd" column="passwd"/>
        <result property="admin" column="admin"/>
        <result property="name" column="name"/>
        <result property="image" column="image"/>
        <result property="createdAt" column="created_at"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Users.columns">
	    <![CDATA[
		id,email,passwd,admin,name,image,created_at
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Users.insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO users (
        	id ,
        	email ,
        	passwd ,
        	admin ,
        	name ,
        	image ,
        	created_at 
        ) VALUES (
        	#{id} ,
        	#{email} ,
        	#{passwd} ,
        	#{admin} ,
        	#{name} ,
        	#{image} ,
        	#{createdAt} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="Users.update" >
    <![CDATA[
        UPDATE users SET
	        email = #{email} ,
	        passwd = #{passwd} ,
	        admin = #{admin} ,
	        name = #{name} ,
	        image = #{image} ,
	        created_at = #{createdAt} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="Users.delete">
    <![CDATA[
        DELETE FROM users WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="Users.getById" resultMap="RM.Users">
		SELECT <include refid="Users.columns" />
	    <![CDATA[
		    FROM users 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="Users.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(email)">
				AND email = #{email}
			</if>
	       <if test="@Ognl@isNotEmpty(passwd)">
				AND passwd = #{passwd}
			</if>
	       <if test="@Ognl@isNotEmpty(admin)">
				AND admin = #{admin}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND name = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(image)">
				AND image = #{image}
			</if>
	       <if test="@Ognl@isNotEmpty(createdAt)">
				AND created_at = #{createdAt}
			</if>
		</where>
	</sql>
		
    <select id="Users.findPage.count" resultType="long">
        SELECT count(*) FROM users 
		<include refid="Users.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Users.findPage" resultMap="RM.Users">
    	SELECT <include refid="Users.columns" />
	    FROM users 
		<include refid="Users.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

    <select id="Users.getByEmail" resultMap="RM.Users" parameterType="java.lang.String">
	    SELECT <include refid="Users.columns"/>
	    <![CDATA[
	        FROM users where email = #{email}
	    ]]>
    </select>
    
	
</mapper>

